//*****************************************************************
//**   NPC Attack Events
//**       By Lerkur
//**   Edited by Tattooed Corpse
//**   Edited by Anarch Cassius
//**  
//**  This script contains:
//**   -e_npc_wars event that trigger attack and assistance based on karma levels
//**    and race

//**    and causes an NPC to attack a criminal player

//**   -e_click_recognition event that shows a PC if an NPC is racially hostile to them**modified by Tattooed Corpse for Hued Names...

//*****************************************************************

[FUNCTION isFactionEnemy]
RETURN ( <hval <DEF.race.<TAG.NPCAI.Race>.Enemy>> & <<ARGN1>.TAG0.NPCAI.Race> ) 

[FUNCTION isFactionAlly]
RETURN ( <hval <DEF.race.<TAG.NPCAI.Race>.Ally>> & <<ARGN1>.TAG0.NPCAI.Race> ) 


[EVENTS e_npc_wars]

ON=@NPCLookAtChar
 IF (0<MEMORYFINDTYPE(MEMORY_IPET)>) || (<SRC.ISGM>) || (<FLAGS>&statf_war) || (<FLAGS>&statf_freeze) || !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>)
   RETURN
 ENDIF

 IF ( <hval <DEF.race.<TAG.NPCAI.Race>.Enemy>> & <<ARGN1>.TAG0.NPCAI.Race> )  //If my target's race is in my hates
       IF ( <ISEVENT.e_squad_member> )
	 	AlertSquad
       ENDIF
       ATTACK 
       f_warcry
       RETURN

 ELIF ( <hval <DEF.race.<TAG.NPCAI.Race>.Ally>> & <<ARGN1>.TAG0.NPCAI.Race> ) 
     IF (<SRC.FLAGS>&statf_war) && !(<npc> == brain_healer) //If ally is fighting
	 If (<hval <DEF.race.<TAG.NPCAI.Race>.Ally>> &<SRC.ATTACKER.last.TAG0.NPCAI.Race>) || (<SRC.ATTACKER.last>==0) //and they have a valid target
		return
	 elif <FriendlySpellCheck>
		return
	 else
		 OBJ = <SRC.ATTACKER.last>
		 If (<obj> == <src>)
			 return
	         ENDIF		
	         IF ( <ISEVENT.e_squad_member> )
			 TRYSRC <OBJ> AlertSquad
	         ENDIF
	         TRYSRC <OBJ> ATTACK
	         f_warcry
	         RETURN
	 endif
     ELSE
       SquadTest
     ENDIF
 ENDIF

if (<npc> == brain_healer)
	if <src.flags> & statf_dead
		src.resurrect
	endif
endif

IF (<EVAL npcai_opt_karma_NPC>) || (<EVAL npcai_opt_karma_PC>) 

 IF (<KARMA> > 0) //If my karma is good
   IF (<SRC.KARMA> < -1000) //If my target's karma is bad attack
     IF !( <hval <DEF.race.<TAG.NPCAI.Race>.Ally>> & <SRC.TAG0.NPCAI.Race> )
	IF (<EVAL npcai_opt_karma_NPC>) && <SRC.BRAIN>
         ATTACK
         f_warcry
	ELIF (<EVAL npcai_opt_karma_PC>) && !<SRC.BRAIN>
         ATTACK
         f_warcry
	ENDIF
     ENDIF
   ELIF ( ((<hval <DEF.race.<TAG.NPCAI.Race>.Ally>>)&(<SRC.TAG0.NPCAI.Race>)) || (<SRC.KARMA> > 0) ) //If my target's karma is good or an ally buff
	IF (<EVAL npcai_opt_karma_NPC>) && <SRC.BRAIN>
	     If <FriendlySpellCheck>
			return
	     endif
	ELIF (<EVAL npcai_opt_karma_PC>) && !<SRC.BRAIN>
	     If <FriendlySpellCheck>
			return
	     endif
	ENDIF
   ENDIF
 ELIF (<KARMA> < -1000) //If my karma is bad 
   IF (<hval <DEF.race.<TAG.NPCAI.Race>.Ally>> & <SRC.TAG0.NPCAI.Race>) //buff allies
	IF (<EVAL npcai_opt_karma_NPC>) && <SRC.BRAIN>
	     If <FriendlySpellCheck>
			return
	     endif
	ELIF (<EVAL npcai_opt_karma_PC>) && !<SRC.BRAIN>
	     If <FriendlySpellCheck>
			return
	     endif
	ENDIF
   ELIF !(<SRC.NPC> == brain_animal) //attack non-animal, non-allies
     IF !( <hval <DEF.race.<TAG.NPCAI.Race>.Ally>> & <SRC.TAG0.NPCAI.Race> )
	IF (<EVAL npcai_opt_karma_NPC>) && <SRC.BRAIN>
         ATTACK
         f_warcry
	ELIF (<EVAL npcai_opt_karma_PC>) && !<SRC.BRAIN>
         ATTACK
         f_warcry
	ENDIF
     ENDIF
   ENDIF
 ELSE //If my karma is neutral
   IF ( (<hval <DEF.race.<TAG.NPCAI.Race>.Ally>>)&(<SRC.TAG0.NPCAI.Race>) ) //If my target is an ally buff
	IF (<EVAL npcai_opt_karma_NPC>) && <SRC.BRAIN>
	     If <FriendlySpellCheck>
			return
	     endif
	ELIF (<EVAL npcai_opt_karma_PC>) && !<SRC.BRAIN>
	     If <FriendlySpellCheck>
			return
	     endif
	ENDIF
   ENDIF
 ENDIF

ENDIF
RETURN



[FUNCTION HostileSpellCheck]
 OBJ=<ATTACKER.MAX>
 IF (<ISEVENT.e_intel_char_magery_user>)
	IF <npccast_magery_offense>
		return 1
	endif
 ENDIF
 IF (<ISEVENT.e_intel_char_chivalry_user>)
	IF <npccast_chivalry_offense>
		return 1
	endif
 ENDIF
 IF (<ISEVENT.e_intel_char_necro_user>)
	IF <npccast_necro_offense>
		return 1
	endif
 ENDIF
 RETURN 0

[FUNCTION HealerSpellCheck]
 IF ( (<CONT.ISEVENT.e_intel_char_magery_user>)
	IF <CONT.npccast_magery_healing_ally>
		return 1
	elif <CONT.npccast_magery_defense_ally>
		return 1
	endif
 ENDIF
 IF ( (<CONT.ISEVENT.e_intel_char_chivalry_user>)
	IF <CONT.npccast_chivalry_healing_ally>
		return 1
	endif
 ENDIF
 RETURN 0

[FUNCTION FriendlySpellCheck]
 IF !( (<EVAL npcai_opt_castbeneficialspells>) )
   RETURN 0
 ENDIF
 OBJ=<SRC.UID>
 IF ( (<ISEVENT.e_intel_char_magery_user>) && (<MANA> > (<MAXMANA>/2)) )
	IF <npccast_magery_healing_ally>
		return 1
	elif <npccast_magery_defense_ally>
		return 1
	endif
 ENDIF
 IF ( (<ISEVENT.e_intel_char_chivalry_user>) && (<MANA> > (<MAXMANA>/2)) )
	IF <npccast_chivalry_healing_ally>
		return 1
	endif
 ENDIF
 RETURN 0

////////////////////////////// Magery //////////////////////////////


[EVENTS e_intel_char_magery_user]


ON=@NPCSeeNewPlayer
IF (<EVAL <TAG0.LASTCASTING>>) || (<FLAGS>&statf_freeze)
	return
endif
   IF (<EVAL {1 100}>>(<TAG0.RANDCAST>+40))
      RETURN
   ENDIF
If <npccast_magery_defense>
	return 1
endif
RETURN


on=@NPCActFight
Tag.target = <src>
IF (<EVAL <TAG0.LASTCASTING>>) || (<FLAGS>&statf_freeze)
	return 1
endif
IF (<distance> <= <range>)
	IF (<EVAL {1 200}> > (<TAG0.RANDCAST>+30) )
	      RETURN
	ENDIF
ELSE
	IF (<EVAL {1 100}> > (<TAG0.RANDCAST>+30) )
	      GO <SRC>
	      TIMERF 1, GO <SRC>
	      RETURN
	ENDIF
ENDIF
//check evalint here
IF (<ATTACKER> > 0)
	NpcAntiMage
	IF (<TAG.MAGE>==1) && !(<OBJ.FLAGS>&statf_freeze) && !(<obj.uid>==<uid>) //hit an unfrozen mage with mana kill if possible
		If (<npccast_magery_anticaster>)
			return 1
		endif
	ELSE //otherwise just find a good unfrozen target if possible
		IF !(<attacker.max.FLAGS>&statf_freeze) && !(<attacker.max.uid>==<uid>)
			OBJ=<attacker.max>
		ELIF !(<attacker.last.FLAGS>&statf_freeze) && !(<attacker.last.uid>==<uid>)
			OBJ=<attacker.last>
		ELIF !(<TAG.MAGE>==1) && !(<attacker.max.uid>==<uid>)
			OBJ=<attacker.max>
		ELIF !(<TAG.MAGE>==1)
			OBJ=<attacker.last>
		ENDIF
	ENDIF
ELSE
	OBJ=<SRC>
ENDIF
	If !(<R3>) || (<OBJ.FLAGS>&statf_freeze)
		IF (<R5>)
			if <npccast_magery_heavy_offense>
				return 1
			ENDIF
		ELIF <npccast_magery_summon>
			return 1
		endif
	endif
	if <npccast_magery_offense>
		return 1
	elif <npccast_magery_defense>
		return 1
	endif
return

on=@Attack
Tag.target = <src>
IF (<EVAL <TAG0.LASTCASTING>>) || (<FLAGS>&statf_freeze)
	return 1
endif
RETURN

ON=@SpellFail
	TAG.LASTCASTING=
	TAG.SPELLCASTING=
	IF <UID.<TAG0.TARGET>.HITS>
		TIMERF 1, TRYSRC <TAG.TARGET> ATTACK
	ELSE
		TAG0.TARGET=
	ENDIF
	RETURN

ON=@SpellSuccess
	TAG.LASTCASTING=
	TAG.SPELLCASTING=
	IF <UID.<TAG0.TARGET>.HITS>
		TIMERF 1, TRYSRC <TAG.TARGET> ATTACK
	ELSE
		TAG0.TARGET=
	ENDIF
	RETURN


ON=@GetHit
IF (<EVAL <TAG0.LASTCASTING>>) || (<FLAGS>&statf_freeze)
	return
endif
npcNearCaster
IF (<TAG0.NEARBY>==1) && !(<EVAL {1 100}>>(<TAG0.RANDCAST>+20))
	IF (<SRC.FLAGS>&statf_conjured)
		IF !(<R3>)
			IF (<npccancast s_mass_dispel>)
				npccast s_mass_dispel,<src>
				return
			ENDIF
		ENDIF
		IF (<npccancast s_dispel>)
			npccast s_dispel,<src>
			return
		ENDIF
	ENDIF
	If !(<R3>)
		If <npccast_magery_defense> 
			return
		endif
	endif
	if <npccast_magery_healing>
		return
	elif <npccast_magery_offense>
		return
	endif
ELIF (<TAG0.NEARBY>==0) && !(<EVAL {1 100}>>(<TAG0.RANDCAST>+45))
	IF (<SRC.FLAGS>&statf_conjured)
		IF !(<R3>)
			IF (<npccancast s_mass_dispel>)
				npccast s_mass_dispel,<src>
				return
			ENDIF
		ENDIF
		IF (<npccancast s_dispel>)
			npccast s_dispel,<src>
			return
		ENDIF
	ENDIF
	If !(<R3>)
		If <npccast_magery_defense> 
			return
		endif
	endif
	if <npccast_magery_healing>
		return
	elif <npccast_magery_offense>
		return
	endif
ENDIF
RETURN


ON=@ENVIRONCHANGE
IF (<EVAL <TAG0.LASTCASTING>>) || (<FLAGS>&statf_freeze)
	return
endif
   IF (<EVAL {1 100}>>(<TAG0.RANDCAST>+40))
      RETURN
   ENDIF
IF (<FINDID(i_rune_poison)>) || (<FINDID(i_memory_poison_new)>)
	IF (<npccancast s_cure>)
		npccast s_cure,<uid>
		return
	ENDIF
ENDIF
IF (<HITS> < <MAXHITS>)
	If (<R3>)
		IF (<npccancast s_greater_heal>)
			npccast s_greater_heal,<uid>
			return
		endif
	endif	
	IF (<npccancast s_heal>)
		npccast s_heal,<uid>
		return
	ENDIF
ENDIF
IF !(<FLAGS>&statf_war) && (<MANA> < <MAXMANA>) && (<MEDITATION> > 0)
	SKILL MEDITATION
ENDIF
RETURN 



ON=@SPELLEFFECT
IF (<EVAL <TAG0.LASTCASTING>>) || (<FLAGS>&statf_freeze)
	return
endif
IF (<ATTACKER> > 0)
	npcNearCaster
	IF (<TAG0.NEARBY>==1) || (<EVAL {1 100}>>(<TAG0.RANDCAST>+45))
		RETURN
	ENDIF
	npcAntiMage
	IF (<TAG.MAGE>==1) && !(<OBJ.FLAGS>&statf_freeze) && !(<obj.uid>==<uid>) && !(<R2>) //hit an unfrozen mage with mana kill if possible
		If (<npccast_magery_anticaster>)
			return
		endif
	ELSE //otherwise just find a good unfrozen target if possible
		IF !(<attacker.max.FLAGS>&statf_freeze) && !(<attacker.max.uid>==<uid>)
			OBJ=<attacker.max>
		ELIF !(<attacker.last.FLAGS>&statf_freeze) && !(<attacker.last.uid>==<uid>)
			OBJ=<attacker.last>
		ELIF !(<TAG.MAGE>==1) && !(<attacker.max.uid>==<uid>)
			OBJ=<attacker.max>
		ELIF !(<TAG.MAGE>==1)
			OBJ=<attacker.last>
		ENDIF
	ENDIF
	If !(<R3>) || (<OBJ.FLAGS>&statf_freeze) //if target is paralyzed hit em good while you can
		if <npccast_magery_heavy_offense> 
			return
		elif <npccast_magery_summon>
			return
		endif
	endif
	If !(<R3>)
		If <npccast_magery_defense> 
			return
		endif
	endif
	if <npccast_magery_offense>
		return
	elif <npccast_magery_healing>
		return
	endif
ELSE
	If <npccast_magery_healing>
		return
	endif
ENDIF
return


[FUNCTION npccast_magery_healing]
	IF (<FINDID(i_rune_poison)>) || (<FINDID(i_memory_poison_new)>)
		IF (<npccancast s_cure>)
			npccast s_cure,<uid>
			return 1
		ENDIF
	ENDIF
	IF (<HITS> < (<MAXHITS>/2))
		IF (<npccancast s_greater_heal>) && (<R3>)
			npccast s_greater_heal,<uid>
			return 1
		ELIF (<npccancast s_heal>)
			npccast s_heal,<uid>
			return 1
		ENDIF
	ENDIF
	return 0

[FUNCTION npccast_magery_healing_ally]
	IF (<OBJ.FINDID(i_rune_poison)>) || (<OBJ.FINDID(i_memory_poison_new)>)
		IF (<npccancast s_cure>)
			npccast s_cure,<obj>
			return 1
		ENDIF
	ENDIF
	IF (<OBJ.HITS> < <OBJ.MAXHITS>)
		IF (<npccancast s_greater_heal>) && (<R3>)
			npccast s_greater_heal,<obj>
			return 1
		ELIF (<npccancast s_heal>)
			npccast s_heal,<obj>
			return 1
		ENDIF
	ENDIF
	return 0


[FUNCTION npccast_magery_offense]
	IF (<I.UID> == <OBJ.UID>)
		return 0
	ENDIF
	IF  (<npccancast s_flamestrike>) && !(<R4>)
		npccast s_flamestrike,<obj>
		return 1
	ELIF (<npccancast s_energy_bolt>)  && !(<R3>)
		npccast s_energy_bolt,<obj>
		return 1
	ELIF (<npccancast s_lightning>) && !(<R3>)
		npccast s_lightning,<obj>
		return 1
	ELIF (<npccancast s_curse>) && !(<R3>)
		npccast s_curse,<obj>
		return 1
	ELIF (<npccancast s_fireball>) && !(<R3>)
		npccast s_fireball,<obj>
		return 1
	ELIF  (<npccancast s_paralyze>) && (<attacker> > 1) && !(<OBJ.FLAGS>&statf_freeze) && !(<R3>)
		npccast s_paralyze,<obj>
		return 1
	ELIF (<npccancast s_poison>) && !(<R3>)
		npccast s_poison,<obj>
		return 1
	//Add energy field?
	ELIF (<npccancast s_poison_field>) && !(<R3>)
		npccast s_poison_field,<obj.p>
		return 1
	ELIF (<npccancast s_fire_field>) && !(<R3>)
		npccast s_fire_field,<obj.p>
		return 1
	ELIF (<npccancast s_paralyzation_field>) && !(<R3>)
		npccast s_paralyzation_field,<obj.p>
		return 1
	ELIF  (<npccancast s_web>) && !(<R3>)
		npccast s_web,<obj>
		return 1
	ELIF (<npccancast s_weaken>) && !(<R3>)
		npccast s_weaken,<obj>
		return 1
	ELIF (<npccancast s_clumsy>) && !(<R3>)
		npccast s_clumsy,<obj>
		return 1
	ELIF (<npccancast s_harm>) && !(<R3>)
		npccast s_harm,<obj>
		return 1
	ELIF (<npccancast s_magic_arrow>)
		npccast s_magic_arrow,<obj>
		return 1
	ENDIF
return 0


[FUNCTION npccast_magery_anticaster]
	IF (<I.UID> == <OBJ.UID>)
		return 0
	ENDIF
	IF (<npccancast s_mana_vampire>) && !(<R3>)
		npccast s_mana_vampire,<obj>
		return 1
	ELIF (<npccancast s_mind_blast>) && !(<R3>)
		npccast s_mind_blast,<obj>
		return 1
	ELIF (<npccancast s_mana_drain>) && !(<R3>)
		npccast s_mana_drain,<obj>
		return 1
	ELIF (<npccancast s_feeblemind>)
		npccast s_feeblemind,<obj>
		return 1
	ENDIF
return 0


[FUNCTION npccast_magery_defense_ally]
      IF !(<OBJ.FINDID(i_rune_protection)>) && (<npccancast s_protection>) && !(<R3>)
		npccast s_protection,<obj>
		return 1
      ELIF !(<OBJ.FINDID(i_rune_bless)>) && (<npccancast s_bless>) && !(<R3>)
		npccast s_bless,<obj>
		return 1
      ELIF !(<OBJ.FINDID(i_rune_strength)>) && (<npccancast s_strength>) && !(<R3>)
		npccast s_strength,<obj>
		return 1
      ELIF !(<OBJ.FINDID(i_rune_agility)>) && (<npccancast s_agility>)
		npccast s_agility,<obj>
		return 1
      ENDIF
return 0


[FUNCTION npccast_magery_defense]
      IF !(<FINDID(i_rune_protection)>) && (<npccancast s_protection>) && !(<R3>)
		npccast s_protection,<uid>
		return 1
      ELIF !(<FINDID(i_rune_bless)>) && (<npccancast s_bless>) && !(<R3>)
		npccast s_bless,<uid>
		return 1
      ELIF !(<FLAGS>&statf_reactive) && (<npccancast s_reactive_armor>) && !(<R3>)
		npccast s_reactive_armor,<uid>
		return 1
      ELIF !(<FLAGS>&statf_reflection) && (<npccancast s_magic_reflection>) && !(<R3>)
		npccast s_magic_reflection,<uid>
		return 1
      ELIF !(<FINDID(i_rune_cunning)>) && (<npccancast s_cunning>) && !(<R3>)
		npccast s_cunning,<uid>
		return 1
      ELIF !(<FINDID(i_rune_strength)>) && (<npccancast s_strength>) && !(<R3>)
		npccast s_strength,<uid>
		return 1
      ELIF !(<FINDID(i_rune_agility)>) && (<npccancast s_agility>)
		npccast s_agility,<uid>
		return 1
      ENDIF
return 0

[FUNCTION npccast_magery_summon]
	IF (<FLAGS>&statf_conjured)
		return 0
	ENDIF
	IF (<npccancast s_summon_daemon>) && !(<R3>)
		npccast s_summon_daemon,<obj.p>
		return 1
	ELIF (<npccancast s_summon_elem_earth>) && !(<R3>)
		npccast s_summon_elem_earth,<obj.p>
		return 1
	ELIF (<npccancast s_summon_elem_fire>) && !(<R3>)
		npccast s_summon_elem_fire,<obj.p>
		return 1
	ELIF (<npccancast s_summon_elem_water>) && !(<R3>)
		npccast s_summon_elem_water,<obj.p>
		return 1
	ELIF (<npccancast s_summon_elem_air>) && !(<R3>)
		npccast s_summon_elem_air,<obj.p>
		return 1
	ELIF (<npccancast s_energy_vortex>) && !(<R3>)
		npccast s_energy_vortex,<obj.p>
		return 1
	ELIF (<npccancast s_summon_creature>) && !(<R3>)
		npccast s_summon_creature,<obj.p>
		return 1
	ELIF (<npccancast s_blade_spirits>) && !(<R3>)
		npccast s_blade_spirits,<obj.p>
		return 1
	ENDIF
return 0

[FUNCTION npccast_magery_heavy_offense]
	IF (<I.UID> == <OBJ.UID>)
		return 0
	ENDIF
	IF  (<npccancast s_mass_curse>) && (<attacker> > 1) && !(<R3>)
		npccast s_mass_curse,<obj>
		return 1
	ELIF  (<npccancast s_meteor_swarm>) && (<attacker> > 1) && !(<R3>)
		npccast s_meteor_swarm,<obj>
		return 1
	ELIF  (<npccancast s_chain_lightning>) && (<attacker> > 1) && !(<R3>)
		npccast s_chain_lightning,<obj.p>
		return 1
	ELIF  (<npccancast s_earthquake>) && (<attacker> > 1) && !(<R3>)
		npccast s_earthquake,<obj>
		return 1
	ELIF  (<npccancast s_flamestrike>) && !(<R3>)
		npccast s_flamestrike,<obj>
		return 1
	ELIF (<npccancast s_energy_bolt>) && !(<R3>)
		npccast s_energy_bolt,<obj>
		return 1
	ELIF (<npccancast s_poison_field>) && !(<R3>)
		npccast s_poison_field,<obj.p>
		return 1
	ELIF (<npccancast s_fire_field>) && !(<R3>)
		npccast s_fire_field,<obj.p>
		return 1
	ELIF (<npccancast s_paralyzation_field>) && !(<R3>)
		npccast s_paralyzation_field,<obj.p>
		return 1
	ELIF  (<npccancast s_web>) && !(<R3>)
		npccast s_web,<obj>
		return 1
	ELIF  (<npccancast s_paralyze>) && !(<R3>) && !(<OBJ.FLAGS>&statf_freeze)
		npccast s_paralyze,<obj>
		return 1
	ELIF   (<npccancast s_lightning>) && !(<R3>)
		npccast s_lightning,<obj>
		return 1
	ELIF   (<npccancast s_poison>) && !(<R3>)
		npccast s_poison,<obj>
		return 1
	ENDIF
return 0





////////////////////////////// Chivalry //////////////////////////////




[EVENTS e_intel_char_chivalry_user]

ON=@NPCSeeNewPlayer
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
   IF (<EVAL {1 100}>>(<TAG0.RANDCAST>+40))
      RETURN 0
   ENDIF
If <npccast_chivalry_defense>
	return 1
endif
RETURN 0


on=@NPCActFight
Tag.target = <src>
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
IF (<EVAL {1 300}>>(<TAG0.RANDCAST>+20))
      RETURN 0
ENDIF
IF (<ATTACKER> > 0)
	IF !(<attacker.max.FLAGS>&statf_freeze) && !(<attacker.max.uid>==<uid>)
		OBJ=<attacker.max>
	ELIF !(<attacker.last.FLAGS>&statf_freeze) && !(<attacker.last.uid>==<uid>)
		OBJ=<attacker.last>
	ELIF !(<attacker.max.uid>==<uid>)
		OBJ=<attacker.max>
	ELSE
		OBJ=<attacker.last>
	ENDIF
ELSE
	OBJ=<SRC>
ENDIF
	if <npccast_chivalry_offense>
		return 1
	elif <npccast_chivalry_defense>
		return 1
	endif
return 0


on=@Attack
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return
endif


ON=@SpellFail
	TAG.LASTCASTING=
	IF <UID.<TAG0.TARGET>.HITS>
		TIMERF 1, ATTACK <TAG.TARGET>
	ELSE
		TAG0.TARGET=
	ENDIF
	RETURN

ON=@SpellSuccess
	TAG.LASTCASTING=
	IF <UID.<TAG0.TARGET>.HITS>
		TIMERF 1, ATTACK <TAG.TARGET>
	ELSE
		TAG0.TARGET=
	ENDIF
	RETURN

ON=@GetHit
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
IF !(<EVAL {1 100}>>(<TAG0.RANDCAST>+30))
	If !(<R3>)
		If <npccast_chivalry_defense> 
			return
		endif
	endif
	if <npccast_chivalry_healing>
		return
	elif <npccast_chivalry_offense>
		return
	endif
ENDIF
RETURN 0


ON=@ENVIRONCHANGE
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
   IF (<EVAL {1 100}>>(<TAG0.RANDCAST>+40))
      RETURN 0
   ENDIF
IF (<FINDID(i_rune_poison)>) || (<FINDID(i_memory_poison_new)>)
	IF (<npccancast s_cure>)
		npccast s_cure,<uid>
		return
	ENDIF
ENDIF
IF (<HITS> < <MAXHITS>)
	If (<R3>)
		IF (<npccancast s_greater_heal>)
			npccast s_greater_heal,<uid>
			return
		endif
	endif	
	IF (<npccancast s_heal>)
		npccast s_heal,<uid>
		return
	ENDIF
ENDIF
IF !(<FLAGS>&statf_war) && (<MANA> < <MAXMANA>) && (<MEDITATION> > 0)
	SKILL MEDITATION
ENDIF
RETURN


ON=@SPELLEFFECT
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
IF (<ATTACKER> > 0)
	IF !(<attacker.max.FLAGS>&statf_freeze) && !(<attacker.max.uid>==<uid>)
		OBJ=<attacker.max>
	ELIF !(<attacker.last.FLAGS>&statf_freeze) && !(<attacker.last.uid>==<uid>)
		OBJ=<attacker.last>
	ELIF !(<TAG.MAGE>==1) && !(<attacker.max.uid>==<uid>)
		OBJ=<attacker.max>
	ELSE !(<TAG.MAGE>==1)
		OBJ=<attacker.last>
	ENDIF
	If !(<R3>)
		If <npccast_chivalry_defense> 
			return 1
		endif
	endif
	if <npccast_chivalry_offense>
		return 1
	elif <npccast_chivalry_healing>
		return 1
	endif
ELSE
	If <npccast_chivalry_healing>
		return 1
	endif
ENDIF
return 


[FUNCTION npccast_chivalry_healing]
	IF (<FINDID(i_rune_poison)>) || (<FINDID(i_memory_poison_new)>)
		IF (<npccancast s_transmute_poison>) && (<R3>)
			npccast s_transmute_poison,<uid>
			return 1
		ELIF (<npccancast s_cleanse_by_fire>)
			npccast s_cleanse_by_fire,<uid>
			return 1
		ENDIF
	ENDIF
	IF (<HITS> < (<MAXHITS>/2))
		IF (<npccancast s_close_wounds>)
			npccast s_close_wounds,<uid>
			return 1
		ENDIF
	ENDIF
	return 0

[FUNCTION npccast_chivalry_healing_ally]
	IF (<OBJ.FINDID(i_rune_poison)>) || (<OBJ.FINDID(i_memory_poison_new)>)
		IF (<npccancast s_transmute_poison>) && (<R3>)
			npccast s_transmute_poison,<obj>
			return 1
		ELIF (<npccancast s_cleanse_by_fire>)
			npccast s_cleanse_by_fire,<obj>
			return 1
		ENDIF
	ENDIF
	IF (<OBJ.HITS> < <OBJ.MAXHITS>)
		IF (<npccancast s_close_wounds>)
			npccast s_close_wounds,<obj>
			return 1
		ENDIF
	ENDIF
	return 0


[FUNCTION npccast_chivalry_offense]
	IF (<I.UID> == <OBJ.UID>)
		return 0
	ENDIF
	IF  (<npccancast s_Holy_Light>) && (<obj.karma> < 0) && !(<R3>)
		npccast s_Holy_Light,<obj>
		return 1
	ELIF (<npccancast s_dispel_evil>) && (<obj.FLAGS>&statf_conjured) && (<obj.karma> < 0)
		npccast s_dispel_evil,<obj>
		return 1
	ENDIF
return 0


[FUNCTION npccast_chivalry_defense]
      IF  !(<obj.restest i_enemy_of_one_timer>) && (<npccancast s_enemy_of_one>) && !(<R4>)
		npccast s_enemy_of_one
		return 1
      ELIF !(<obj.restest i_divine_fury_timer>) && (<npccancast s_divine_fury>) && !(<R3>)
		npccast s_divine_fury
		return 1
      ELIF !(<obj.restest i_consecrate_timer>) && (<npccancast s_consecrate_weapon>) && !(<R3>)
		npccast s_consecrate_weapon
		return 1
      ENDIF
return 0



////////////////////////////// Necromancy //////////////////////////////



[EVENTS e_intel_char_necro_user]

ON=@NPCSeeNewPlayer
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
   IF (<EVAL {1 100}>>(<TAG0.RANDCAST>+45))
      RETURN 0
   ENDIF
IF (<npccancast s_curse_weapon>) && (<weapon>) && !(<src.restest i_curse_weapon>)
	npccast s_curse_weapon
	return 1
endif
RETURN 0

ON=@NPCLookAtItem
 IF (<ARGO.TYPE> == t_corpse) && !(<argo.MOREY>==1) && !(<argo.link.uid>)
	IF ((<HITS> > (<MAXHITS>/2)) || (<SPIRITSPEAK> <= 0)) && !(<FLAGS>&statf_conjured)
	 obj=<argo>
	 npccast s_animate_dead,<obj>
	ELSE
	 skill 32 //spiritspeak
	ENDIF
 ENDIF
return


on=@NPCActFight
Tag.target = <src>
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
IF (<EVAL {1 300}>>(<TAG0.RANDCAST>+25))
      RETURN 0
ENDIF
//check evalint here
IF (<ATTACKER> > 0)
	npcAntiMage
	IF (<TAG.MAGE>==1) && !(<OBJ.FLAGS>&statf_freeze) && !(<obj.uid>==<uid>) && !(<R2>) //hit an unfrozen mage with mana kill if possible
		IF (<npccancast s_mind_rot>) && !(<obj.restest i_mind_rot>)
			npccast s_mind_rot,<obj>
			return 1
		endif
	ELSE //otherwise just find a good unfrozen target if possible
		IF !(<attacker.max.FLAGS>&statf_freeze) && !(<attacker.max.uid>==<uid>)
			OBJ=<attacker.max>
		ELIF !(<attacker.last.FLAGS>&statf_freeze) && !(<attacker.last.uid>==<uid>)
			OBJ=<attacker.last>
		ELIF !(<TAG.MAGE>==1) && !(<attacker.max.uid>==<uid>)
			OBJ=<attacker.max>
		ELIF !(<TAG.MAGE>==1)
			OBJ=<attacker.last>
		ENDIF
	ENDIF
ELSE
	OBJ=<SRC>
ENDIF
	IF (<npccancast s_curse_weapon>) && (<weapon>) && !(<src.restest i_curse_weapon>) && !(<R3>)
		npccast s_curse_weapon
		return 1
	endif
	if <npccast_necro_offense>
		return 1
	endif
return 0



on=@Attack
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return
endif

ON=@SpellFail
	TAG.LASTCASTING=
	IF <UID.<TAG0.TARGET>.HITS>
		TIMERF 1, ATTACK <TAG.TARGET>
	ELSE
		TAG0.TARGET=
	ENDIF
	RETURN

ON=@SpellSuccess
	TAG.LASTCASTING=
	IF <UID.<TAG0.TARGET>.HITS>
		TIMERF 1, ATTACK <TAG.TARGET>
	ELSE
		TAG0.TARGET=
	ENDIF
	RETURN

ON=@GetHit
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
npcNearCaster
IF (<TAG0.NEARBY>==1) && !(<EVAL {1 100}>>(<TAG0.RANDCAST>+20))
	IF (<npccancast s_curse_weapon>) && (<weapon>) && !(<src.restest i_curse_weapon>) && !(<R2>)
		npccast s_curse_weapon
		return
	endif
	if <npccast_necro_offense>
		return
	endif
ELIF (<TAG0.NEARBY>==0) && !(<EVAL {1 100}>>(<TAG0.RANDCAST>+45))
	IF (<npccancast s_curse_weapon>) && (<weapon>) && !(<src.restest i_curse_weapon>) && !(<R3>)
		npccast s_curse_weapon
		return
	endif
	if <npccast_necro_offense>
		return
	endif
ENDIF
RETURN 0


ON=@SPELLEFFECT
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return
endif
IF (<ATTACKER> > 0)
	npcNearCaster
	IF (<TAG0.NEARBY>==1) || (<EVAL {1 100}>>(<TAG0.RANDCAST>+50))
		RETURN 0
	ENDIF
	npcAntiMage
	IF (<TAG.MAGE>==1) && !(<OBJ.FLAGS>&statf_freeze) && !(<obj.uid>==<uid>) && !(<R2>) //hit an unfrozen mage with mana kill if possible
		IF (<npccancast s_mind_rot>) && !(<obj.restest i_mind_rot>)
			npccast s_mind_rot,<obj>
			return 1
		endif
	ELSE //otherwise just find a good unfrozen target if possible
		IF !(<attacker.max.FLAGS>&statf_freeze) && !(<attacker.max.uid>==<uid>)
			OBJ=<attacker.max>
		ELIF !(<attacker.last.FLAGS>&statf_freeze) && !(<attacker.last.uid>==<uid>)
			OBJ=<attacker.last>
		ELIF !(<TAG.MAGE>==1) && !(<attacker.max.uid>==<uid>)
			OBJ=<attacker.max>
		ELIF !(<TAG.MAGE>==1)
			OBJ=<attacker.last>
		ENDIF
	ENDIF
	IF (<npccancast s_curse_weapon>) && (<weapon>) && !(<src.restest i_curse_weapon>) && !(<R3>)
		npccast s_curse_weapon
		return 1
	endif
	if <npccast_necro_offense>
		return 1
	endif
ENDIF
return

ON=@ENVIRONCHANGE
IF !(<FLAGS>&statf_war) && (<MANA> < <MAXMANA>) && (<MEDITATION> > 0)
	SKILL MEDITATION
ENDIF


[FUNCTION npccast_necro_offense]
	IF (<I.UID> == <OBJ.UID>)
		return 0
	ENDIF
	IF  (<npccancast s_strangle>) && !(<R4>)
		npccast s_strangle,<obj>
		return 1
	ELIF (<npccancast s_wither>) && (<attacker> > 1) && !(<R3>)
		npccast s_wither,<obj>
		return 1
	ELIF (<npccancast s_poison_strike>) && !(<R3>)
		npccast s_poison_strike,<obj>
		return 1
	ELIF (<npccancast s_pain_spike>) && !(<R3>)
		npccast s_pain_spike,<obj>
		return 1
	ELIF (<npccancast s_blood_oath>) && !(<R3>) && !(<obj.restest i_mind_rot>)
		npccast s_blood_oath,<obj>
		return 1
	ELIF  (<npccancast s_evil_omen>) && !(<obj.isevent.e_evil_omen>)
		npccast s_evil_omen,<obj>
		return 1
	ENDIF
return 0


////////////////////////////// Sorcery //////////////////////////////


[EVENTS e_intel_char_sorcery_user]

ON=@NPCSeeNewPlayer
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
   IF (<EVAL {1 100}>>(<TAG0.RANDCAST>+45))
      RETURN 0
   ENDIF
IF (<npccancast s_warmth>) && !(<restest i_warmth_timer>)
	npccast s_warmth,<UID>
	return 1
endif
RETURN 0

ON=@NPCLookAtItem
 IF (<ARGO.TYPE> == t_corpse) && !(<argo.MOREY>==1) && !(<argo.link.uid>)
	IF (<HITS> < (<MAXHITS>/2)) && (<SPIRITSPEAK> > 0)
	 skill 32 //spiritspeak
	ENDIF

 ENDIF
return


on=@NPCActFight
Tag.target = <src>
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
IF (<EVAL {1 300}>>(<TAG0.RANDCAST>+25))
      RETURN 0
ENDIF
//check evalint here
IF (<ATTACKER> > 0)
	IF !(<attacker.max.FLAGS>&statf_freeze) && !(<attacker.max.uid>==<uid>)
		OBJ=<attacker.max>
	ELIF !(<attacker.last.FLAGS>&statf_freeze) && !(<attacker.last.uid>==<uid>)
		OBJ=<attacker.last>
	ELSE
		OBJ=<src>
	ENDIF
ELSE
	OBJ=<SRC>
ENDIF
	IF (<npccancast s_warmth>) && !(<restest i_warmth_timer>)
		npccast s_warmth,<UID>
		return 1
	endif
	if <npccast_sorcery_offense>
		return 1
	endif
return 0



on=@Attack
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return
endif

ON=@SpellFail
	TAG.LASTCASTING=
	IF <UID.<TAG0.TARGET>.HITS>
		TIMERF 1, ATTACK <TAG.TARGET>
	ELSE
		TAG0.TARGET=
	ENDIF
	RETURN

ON=@SpellSuccess
	TAG.LASTCASTING=
	IF <UID.<TAG0.TARGET>.HITS>
		TIMERF 1, ATTACK <TAG.TARGET>
	ELSE
		TAG0.TARGET=
	ENDIF
	RETURN

ON=@GetHit
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return 0
endif
npcNearCaster
IF (<TAG0.NEARBY>==1) && !(<EVAL {1 100}>>(<TAG0.RANDCAST>+20))
	IF (<npccancast s_warmth>) && !(<restest i_warmth_timer>)
		npccast s_warmth,<UID>
		return 1
	endif
	if <npccast_sorcery_offense>
		return 1
	endif
ELIF (<TAG0.NEARBY>==0) && !(<EVAL {1 100}>>(<TAG0.RANDCAST>+45))
	IF (<npccancast s_warmth>) && !(<restest i_warmth_timer>)
		npccast s_warmth,<UID>
		return 1
	endif
	if <npccast_sorcery_offense>
		return 1
	endif
ENDIF
RETURN 0


ON=@SPELLEFFECT
IF !(<EVAL <TAG0.LASTCASTING>> < <EVAL <SERV.TIME>>) || (<FLAGS>&statf_freeze)
	return
endif
IF (<ATTACKER> > 0)
	npcNearCaster
	IF (<TAG0.NEARBY>==1) || (<EVAL {1 100}>>(<TAG0.RANDCAST>+50))
		RETURN 0
	ENDIF
	IF !(<attacker.max.FLAGS>&statf_freeze) && !(<attacker.max.uid>==<uid>)
		OBJ=<attacker.max>
	ELIF !(<attacker.last.FLAGS>&statf_freeze) && !(<attacker.last.uid>==<uid>)
		OBJ=<attacker.last>
	ELSE
		return
	ENDIF
	IF (<npccancast s_warmth>) && !(<restest i_warmth_timer>)
		npccast s_warmth,<UID>
		return 1
	endif
	if <npccast_sorcery_offense>
		return 1
	endif
ENDIF
return

ON=@ENVIRONCHANGE
IF !(<FLAGS>&statf_war) && (<MANA> < <MAXMANA>) && (<MEDITATION> > 0)
	SKILL MEDITATION
ENDIF


[FUNCTION npccast_sorcery_offense]
	IF (<I.UID> == <OBJ.UID>)
		return 0
	ENDIF
	IF  (<npccancast s_summon_chaos_daemon>) && !(<R4>) && !(<FLAGS>&statf_conjured)
		npccast s_summon_chaos_daemon,<obj>
		return 1
	ELIF (<npccancast s_detonation>) && (<attacker> > 1) && !(<R3>)
		npccast s_detonation,<obj>
		return 1
	ELIF (<npccancast s_summon_djinn>) && !(<R3>) && !(<FLAGS>&statf_conjured)
		npccast s_summon_djinn,<obj>
		return 1
	ELIF (<npccancast s_summon_efreet>) && !(<R3>) && !(<FLAGS>&statf_conjured)
		npccast s_summon_efreet,<obj>
		return 1
	ELIF (<npccancast s_summon_hellhound>) && !(<R3>) && !(<FLAGS>&statf_conjured)
		npccast s_summon_hellhound,<obj>
		return 1
	ELIF (<npccancast s_fire_bolt>)
		npccast s_fire_bolt,<obj>
		return 1
	ENDIF
return 0

//////////////////////////////////////////////////////////////////////////

[FUNCTION npcAntiMage]
	TAG.MAGE=0
	FOR <EVAL <ATTACKER>>
		IF (<ATTACKER.<EVAL <LOCAL._FOR>-1>.MAXMANA> >= 35) 
			IF (<TAG.MAGE>==1)
				IF (<ATTACKER.<EVAL <LOCAL._FOR>-1>.MANA> >= <OBJ.MANA>) 
					OBJ=<ATTACKER.<EVAL <LOCAL._FOR>-1>>>
				ENDIF
			ELSE
				TAG.MAGE=1
				OBJ=<ATTACKER.<EVAL <LOCAL._FOR>-1>>>
			ENDIF
		ENDIF
	ENDFOR

[FUNCTION npcNearCaster]
TAG.NEARBY=0
IF (<ATTACKER> > 0)
	local.i = 0
	While ( <dlocal.i> < <ATTACKER> )
        	OBJ=<ATTACKER.<dlocal.i>.UID>
	        LOCAL.DISTANCE = <obj.distance>
		IF (<LOCAL.DISTANCE> < 2) && !(<OBJ.UID> == <UID>)
			TAG.NEARBY=1
		ENDIF
	        Local.i ++
	EndWhile
ENDIF

[FUNCTION npccancast]
LOCAL.SPELL = <EVAL <args>>
LOCAL.SKILL = <EVAL (<STREAT <SERV.SPELL.<LOCAL.SPELL>.SKILLREQ>>)>
IF !(<SERV.SPELL.<LOCAL.SPELL>.MANAUSE> > <MANA>) && !(<FVAL <STRARG <SERV.SPELL.<LOCAL.SPELL>.SKILLREQ>>+50> > <I.<SERV.SKILL.<LOCAL.SKILL>.KEY>>)
	RETURN 1
ELSE
	RETURN 0
ENDIF

[FUNCTION npccast]
 // Determine spell and skill used to cast
 LOCAL.SPELL = <EVAL <ARGV[0]> &~ 0ff000000>
 LOCAL.SKILL = <EVAL (<STREAT <SERV.SPELL.<LOCAL.SPELL>.SKILLREQ>>) &~ 0ff000000>
 IF (<SERV.SPELL.<LOCAL.SPELL>.MANAUSE> > <MANA>)
	RETURN 1
 ENDIF
 IF (<EVAL STRLEN(<SERV.SPELL(<LOCAL.SPELL>).RUNES>)> > 0)
	 SAY <RUNES <LOCAL.SPELL>>
 ENDIF
 IF !(<LOCAL.SKILL>)
  LOCAL.SKILL = 25
 ENDIF
 TAG.LASTCASTING=<eval (<SERV.TIME>+<SERV.SPELL.<LOCAL.SPELL>.CAST_TIME>)>
 TAG.SPELLCASTING=<LOCAL.SPELL>

// Set spell target
IF (<ARGV> > 2) //use coords if given
    ACT = 0
    ACTP = <ARGV[1]>, <ARGV[2]>, <ARGV[3]>, <ARGV[4]>
ELIF (<SERV.SPELL.<LOCAL.SPELL>.FLAGS> & spellflag_targ_xyz) //use coords for ground targ spells regardless
    ACTP = <ACT.P>
    ACT = 0
ELSE
    REF1 = <ARGV[1]>
    IF !(<REF1.UID>)
        REF1 = <ACT.UID>
        IF !(<REF1.UID>)
            REF1 = <UID>
        ENDIF
    ENDIF
    ACT = <REF1.UID>
    ACTP = <REF1.P>
ENDIF

	
 // Set character action
 ACTPRV = <UID>
 ACTARG1 = <LOCAL.SPELL>
 ACTION = <LOCAL.SKILL>
 RETURN 1


[Function RUNES]
LOCAL.LENGTH = <EVAL STRLEN(<SERV.SPELL(<args>).RUNES>)>
LOCAL.CURRUNE=0
local.RUNESTRING="0"
WHILE (<eval <LOCAL.CURRUNE>> <= <eval <LOCAL.LENGTH>>)
	IF (strmatch(*0*,<LOCAL.runestring>))
	IF (strmatch(A,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="An "
	ELSEIF (strmatch(B,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Bet "
	ELSEIF (strmatch(C,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Corp "
	ELSEIF (strmatch(D,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Des "
	ELSEIF (strmatch(E,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Ex "
	ELSEIF (strmatch(F,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Flam "
	ELSEIF (strmatch(G,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Grav "
	ELSEIF (strmatch(H,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Hur "
	ELSEIF (strmatch(I,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="In "
	ELSEIF (strmatch(J,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Jux "
	ELSEIF (strmatch(K,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Kal "
	ELSEIF (strmatch(L,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Lor "
	ELSEIF (strmatch(M,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Mani "
	ELSEIF (strmatch(N,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Nox "
	ELSEIF (strmatch(O,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Ort "
	ELSEIF (strmatch(P,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Por "
	ELSEIF (strmatch(Q,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Quas "
	ELSEIF (strmatch(R,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Rel "
	ELSEIF (strmatch(S,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Sanct "
	ELSEIF (strmatch(T,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Tym "
	ELSEIF (strmatch(U,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Uus "
	ELSEIF (strmatch(V,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Vas "
	ELSEIF (strmatch(W,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Wis "
	ELSEIF (strmatch(X,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Xen "
	ELSEIF (strmatch(Y,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Ylem "
	ELSEIF (strmatch(Z,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="Zu "
	ENDIF
	ELSE
	IF (strmatch(A,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>An "
	ELSEIF (strmatch(B,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Bet "
	ELSEIF (strmatch(C,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Corp "
	ELSEIF (strmatch(D,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Des "
	ELSEIF (strmatch(E,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Ex "
	ELSEIF (strmatch(F,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Flam "
	ELSEIF (strmatch(G,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Grav "
	ELSEIF (strmatch(H,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Hur "
	ELSEIF (strmatch(I,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>In "
	ELSEIF (strmatch(J,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Jux "
	ELSEIF (strmatch(K,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Kal "
	ELSEIF (strmatch(L,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Lor "
	ELSEIF (strmatch(M,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Mani "
	ELSEIF (strmatch(N,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Nox "
	ELSEIF (strmatch(O,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Ort "
	ELSEIF (strmatch(P,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Por "
	ELSEIF (strmatch(Q,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Quas "
	ELSEIF (strmatch(R,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Rel "
	ELSEIF (strmatch(S,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Sanct "
	ELSEIF (strmatch(T,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Tym "
	ELSEIF (strmatch(U,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Uus "
	ELSEIF (strmatch(V,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Vas "
	ELSEIF (strmatch(W,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Wis "
	ELSEIF (strmatch(X,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Xen "
	ELSEIF (strmatch(Y,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Ylem "
	ELSEIF (strmatch(Z,<STRSUB <eval <LOCAL.CURRUNE>> 1 <SERV.SPELL(<args>).RUNES>>))
		local.RUNESTRING="<local.RUNESTRING>Zu "
	ENDIF
	ENDIF
	LOCAL.CURRUNE += 1
ENDWHILE
RETURN <local.RUNESTRING>


[EOF]
